from aiogram import F, Router, Dispatcher, Bot, types
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
import app.database.requests as rq
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from app.keyboards import mainadmin, adminpanel, adminpanel2, mail_and_code

router = Router()
adminid =5129878568
chat_id=-1002449672567
class Register(StatesGroup):
    name = State()
    age = State()
    number = State()
    id = State()
    writeuserid = State()
    sms = State()
    tovar = State()
    price = State()

class Pokupka(StatesGroup):
    tovar = State()
    price = State()
    mail = State()
    code = State()
    id = State()

bot=Bot(token='TOKEN')


@router.message(Command('writeuser'))
async def writeuser(message: Message, state: FSMContext):
    await state.set_state(Register.writeuserid)
    await message.answer("‚úçÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    

@router.message(Register.writeuserid)
async def writeuserid(message: Message, state: FSMContext):
    await state.update_data(writeuserid=message.text)
    await state.set_state(Register.sms)
    await message.answer("ID –ø–æ–ª—É—á–µ–Ωüëå\nüì®–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å")

@router.message(Register.sms)  
async def sms(message: Message, state: FSMContext):
    await state.update_data(sms=message.text)
    data = await state.get_data()
    await bot.send_message(chat_id=data['writeuserid'],  text=f'–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: \n {data['sms']}')
    await message.answer('üì¨–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    state.clear()

@router.message(F.text=='‚úèÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É')
async def write_to_admin(message: Message):
    await message.answer("‚ùóÔ∏è–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –Ω–∞–ø–∏—à–∏—Ç–µ /write –∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: </write –ø—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω>‚ùóÔ∏è")

@router.message(Command('write'))
async def a(message: Message, command: CommandObject):
    if command.args!=None:
        await bot.send_message(chat_id=chat_id, text=f'üì®–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}:\n{command.args}')
    else:
        await message.answer('‚ùå–û—à–∏–±–∫–∞. –ü–æ—Å–ª–µ /write –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª–∏—É—á–∏–ª –∞–¥–º–∏–Ω‚ùå')


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer_sticker('CAACAgIAAxkBAAICs2dcLdnZe_-bUmKMJ1v0IP33Jt29AAL4RQACnHwZS-JD6jzjSEk6NgQ')
    if message.chat.id==adminid:
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∞–¥–º–∏–Ω!üëã', reply_markup=kb.mainadmin)
    else:
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤!üëã', reply_markup=kb.main)
    print(message.chat.id)

@router.message(F.text=='üë§–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def adminpanel(message: Message):
    if message.from_user.id==adminid:
        await message.answer('–í–∞—à –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ', reply_markup=await kb.adminpanel())
        await message.answer("", reply_markup=kb.adminpanel2)        
    else:
        await message.answer('–ß–æ –∞—Ö—É–µ–ª, —Ç—ã –Ω–µ –∞–¥–º–∏–Ω')

@router.callback_query(F.data.startswith('main'))
async def main(callback: CallbackQuery):
    await callback.message.answer("–ú–µ–Ω—é: ", reply_markup= kb.main)
    

@router.callback_query(F.data.startswith('banned'))
async def banned(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Register.id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å')
   
@router.message(Register.id)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    await state.set_state(Register.id)
    data = await state.get_data()
    await message.answer(f"id: {data['id']}")
    await rq.set_banned(data['id'])
    
@router.message(Command('myid'))
async def mtid(message: Message):
    id = message.from_user.id
    print(id)

#–ü–û–õ–£–ß–ï–ù–ò–ï –ê–ô–î–ò –°–¢–ò–ö–ï–†–ê
#@router.message()
#async def stiker(message: types.Message):
#    await message.answer(message.sticker.file_id)
#    await message.answer(message.from_user.id, message.chat.id)

@router.message(F.text == 'üì¶–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer_sticker('CAACAgIAAxkBAAICuGdcLmGC9AbYYIZmYL0aIN50VjwYAAJnQwACT17gS-nRkuwlhtfYNgQ')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup= await kb.categories())

@router.message(Command('spisok'))
async def spisok_bunned_users(message: Message):
    await message.answer(' –°–ø–∏—Å–æ–∫:', reply_markup= kb.banned_userss)

@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.message.answer_sticker('CAACAgIAAxkBAAICyGdcLzFxkMWd_VGWiq37sLzR7IeJAALkVQACAn_xSWQ_cl7oQsmRNgQ')
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                  reply_markup=await kb.items(callback.data.split('_')[1]))
    
# @router.callback_query(F.data.startswith('bunned_users_spisok'))
# async def category(callback: CallbackQuery):
#     await callback.message.answer_sticker('CAACAgIAAxkBAAICyGdcLzFxkMWd_VGWiq37sLzR7IeJAALkVQACAn_xSWQ_cl7oQsmRNgQ')
#     #await callback.message.answer('fksf')

    # await callback.message.answer(' –°–ø–∏—Å–æ–∫:', reply_markup= await kb.banned_userss())


@router.callback_query(F.data.startswith('item_'))
async def category(callback: CallbackQuery, state: FSMContext):
    item_data = await rq.get_item(callback.data.split('_')[1])
    await state.set_state(Pokupka.price)
    await state.update_data(price=item_data.price)
    await state.set_state(Pokupka.tovar)
    await state.update_data(tovar=item_data.name)
    await callback.message.answer_sticker('CAACAgIAAxkBAAIC92dcM7wAAQSu93-kXeP0vDpM0VahPwACIkAAAolaKEoOwXCx8eIH_zYE')
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä')
    await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item_data.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}\n–¶–µ–Ω–∞: {item_data.price}—Ä—É–±', reply_markup=kb.buy)

@router.callback_query(F.data.startswith('buy_brawl_pass'))
async def category(callback: CallbackQuery):
    await callback.message.answer('–û—Ç–ª–∏—á–Ω–æ, —è —Ä–∞–¥, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ —É –Ω–∞—Å —á—Ç–æ —Ç–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏! \n –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: \n 1. –°–±–µ—Ä–ë–∞–Ω–∫: `2202208082846990` \n 2. –°–ü–ë: `+79960460076`\n –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã–µ, —É—Ç–æ—á–Ω—è—Ç—å –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.', reply_markup=kb.proverka_pokupki)

@router.message(F.text=='–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã')
async def proverkaoplatitovara(message: Message, state: FSMContext):
    await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /mail –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞–∞—É–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞! –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞—á–Ω—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', reply_markup=kb.main)


@router.message(Command('mail'))
async def mail(message: Message,  state:FSMContext):
    await state.set_state(Pokupka.mail)
    await message.answer('‚úèÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç—É—Ç —Å–≤–æ—é –ø–æ—á—Ç—É –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞')

@router.message(Command('code'))
async def idpokupatelya(message: Message, state: FSMContext):
    if message.from_user.id==adminid:
        await state.set_state(Pokupka.id)
        await message.answer('‚úèÔ∏è–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–æ–¥')

@router.message(Pokupka.id)
async def code(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    await state.set_state(Pokupka.code)
    data = await state.get_data()
    await message.answer(f'‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞, {data['id']}')
    await bot.send_message(chat_id=data['id'], text='‚úÖ–ê–¥–º–∏–Ω –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞! \n–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ –∫–æ–¥, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ <–Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É> –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏‚úèÔ∏è', reply_markup= kb.main)
    

@router.message(Pokupka.mail)
async def mailupdate(message: Message, state: FSMContext):
    await state.update_data(mail=message.text)
    data = await state.get_data()
    await message.answer('‚úÖ–ü–æ—á—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! \n –¢–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –Ω–∞—á–Ω—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –æ–Ω –ø–æ–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å –∫–æ–¥')
    await bot.send_message(chat_id=chat_id, text=f'üí∏–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞! \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n–ï–≥–æ ID: {message.from_user.id}\n–¢–æ–≤–∞—Ä: {data['tovar']}\n–¶–µ–Ω–∞: {data['price']}. \n–ü–æ—á—Ç–∞: {data['mail']} \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–∫–∞–∑!')



@router.message(F.text=='‚öúÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: Message):

    await message.answer("‚öúÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –Ω–∞ –µ–≥–æ –∫–∞–Ω–∞–ª:", reply_markup=kb.admin)






#–î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢ –î–û–ù–ê–¢

@router.message(Command("donate", "donat", "–¥–æ–Ω–∞—Ç")or F.text=='donate')
async def cmd_donate(message: Message, command: CommandObject):
    if command.args is None or not command.args.isdigit() or not 1 <= int(command.args) <= 2500:
        await message.answer('üí∏–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /donate [–ß–ò–°–õ–û], –≥–¥–µ [–ß–ò–°–õ–û] —ç—Ç–æ —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ –æ—Ç ‚≠êÔ∏è 1 –¥–æ ‚≠êÔ∏è 2500.')
        return

    # —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞
    amount = int(command.args)
    prices = [LabeledPrice(label="XTR", amount=amount)]

    await message.answer_invoice(
        title=("–î–æ–Ω–∞—Ç –∞–≤—Ç–æ—Ä—É"),
        description=('–ù–∞ —Å—É–º–º—É —Ö –∑–≤—ë–∑–¥'),
        prices=prices,

        provider_token="",

        payload=f"{amount}_stars",

        # XTR - —ç—Ç–æ –∫–æ–¥ –≤–∞–ª—é—Ç—ã Telegram Stars
        currency="XTR",
    )


@router.message(Command("refund"))
async def cmd_refund(message: Message, bot: Bot, command: CommandObject):
    t_id = command.args

    # —á–µ–∫–∞–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if t_id is None:
        await message.answer(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /refund [id], –≥–¥–µ [id] —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞.")
        return

    # –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ñ–∞–Ω–¥
    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=t_id
        )
        await message.answer("–†–µ—Ñ–∞–Ω–¥ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤ Telegram.")

    except TelegramBadRequest as e:
        err_text = ("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

        if "CHARGE_ALREADY_REFUNDED" in e.message:
            err_text = ("–†–µ—Ñ–∞–Ω–¥ –ø–æ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –±—ã–ª —Ä–∞–Ω–µ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω.")

        await message.answer(err_text)
        return


@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(ok=True)



@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(ok=True)



@router.message(F.successful_payment)
async def on_successfull_payment(message: Message):
    await message.answer(
  
            "<b>ü´° –°–ø–∞—Å–∏–±–æ!</b>/n–í–∞—à –¥–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.",
            {"t_id": message.successful_payment.telegram_payment_charge_id}
        ),



